{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,gICSrIC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,iBCyCnBC,EAzCQ,SAACV,GACtB,IAAMW,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAA4BlB,EAA5BkB,eAAgBC,EAAYnB,EAAZmB,QAExBC,qBAAU,WACO,cAAXJ,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAMG,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcb,EAAec,QAAQC,MAI3CX,EAAY,CAAEY,YAAa,CAAEvB,KAAMoB,GAAeL,aAGpD,OACE,uBAAMlB,UAAWC,IAAQ0B,KAAMC,SAAUR,EAAzC,UACc,YAAXL,GACC,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAGJ,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUR,EAA3C,UACE,uBAAOW,QAAQ,UAAf,0BACA,0BAAUvB,GAAG,UAAUwB,KAAK,IAAIC,IAAKvB,OAEvC,qBAAKV,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,+BC4BOmC,UA5DE,WACf,IAAQjB,EAAYkB,cAAZlB,QAER,EAA8CmB,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,EAAsD3B,YAAQ4B,KAAtD1B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAc0B,EAAnC,EAA6BC,KAE7BvB,qBAAU,WACRL,EAAYI,KACX,CAACA,EAASJ,IAEb,IAQIT,EAJEsC,EAAsBC,uBAAY,WACtC9B,EAAYI,KACX,CAACA,EAASJ,IAuBb,MAnBe,YAAXC,IACFV,EACE,qBAAKL,UAAU,SAAf,SACE,cAAC6B,EAAA,EAAD,OAKS,cAAXd,GAA0B0B,IAAgC,OAAdA,QAAc,IAAdA,OAAA,EAAAA,EAAgBI,QAAS,IACvExC,EAAW,cAAC,EAAD,CAAcA,SAAUoC,KAIxB,aAAX1B,GACE0B,GAA4C,IAA1BA,EAAeI,SAEnCxC,EAAW,mBAAGL,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQI,SAA5B,UACE,gDACEiC,GACA,wBAAQtC,UAAU,MAAM8C,QAjCC,WAC7BP,GAAmB,IAgCf,2BAIDD,GACC,cAAC,EAAD,CACEpB,QAASA,EACTD,eAAgB0B,IAInBtC","file":"static/js/4.23451a78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const { quoteId } = useParams();\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments?.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'complete' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}