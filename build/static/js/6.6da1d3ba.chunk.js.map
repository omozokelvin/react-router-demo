{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","hooks/use-prompt.js","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","useBlocker","blocker","when","useContext","NavigationContext","navigator","useEffect","unblock","block","tx","autoUnblockingTx","retry","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","message","useCallback","window","confirm","usePrompt","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","navigate","useNavigate","useHttp","addQuote","sendRequest","status","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,wECc9H,SAASC,EAAWC,GAAuB,IAAdC,IAAa,yDAC/C,EAAsBC,qBAAWC,KAAzBC,EAAR,EAAQA,UAERC,qBAAU,WACR,GAAKJ,EAAL,CAEA,IAAMK,EAAUF,EAAUG,OAAM,SAACC,GAC/B,IAAMC,EAAgB,2BACjBD,GADiB,IAEpBE,MAFoB,WAMlBJ,IACAE,EAAGE,WAIPV,EAAQS,MAGV,OAAOH,KACN,CAACF,EAAWJ,EAASC,I,4BC/BXU,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBCqE/BC,EAjEG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBA0BrB,OFQK,SAAmBE,GAAuB,IAAdvB,IAAa,yDAS9CF,EARgB0B,uBACd,SAACjB,GAEKkB,OAAOC,QAAQH,IAAUhB,EAAGE,UAElC,CAACc,IAGiBvB,GEtBpB2B,CACE,oEACAT,GAIA,cAAC,WAAD,UAGE,cAAC,EAAD,UACE,uBACEU,QAnBmB,WACzBT,GAAc,IAmBRP,UAAWC,IAAQgB,KACnBC,SAhCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCxB,EAAM0B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAqB5C,UAKGzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKR,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAQoC,QAAxB,SACE,wBAAQrC,UAAU,MAAMsC,QAlCJ,WAC5B/B,GAAc,IAiCN,iC,gBCrCGgC,UAnBE,WACf,IAAMC,EAAWC,cACjB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBrD,qBAAU,WACO,cAAXqD,GACFL,EAAS,aAEV,CAACA,EAAUK,IAMd,OACE,cAAC,EAAD,CAAWjB,UAAsB,YAAXiB,EAAsBpB,WALtB,SAACqB,GACvBF,EAAYE","file":"static/js/6.6da1d3ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","/**\n * These hooks re-implement the now removed useBlocker and usePrompt hooks in 'react-router-dom'.\n * Thanks for the idea @piecyk https://github.com/remix-run/react-router/issues/8139#issuecomment-953816315\n * Source: https://github.com/remix-run/react-router/commit/256cad70d3fd4500b1abcfea66f3ee622fb90874#diff-b60f1a2d4276b2a605c05e19816634111de2e8a4186fe9dd7de8e344b65ed4d3L344-L381\n */\nimport { useContext, useEffect, useCallback } from 'react';\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom';\n/**\n * Blocks all navigation attempts. This is useful for preventing the page from\n * changing until some condition is met, like saving form data.\n *\n * @param  blocker\n * @param  when\n * @see https://reactrouter.com/api/useBlocker\n */\nexport function useBlocker(blocker, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    const unblock = navigator.block((tx) => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          // Automatically unblock the transition so it can play all the way\n          // through before retrying it. TODO: Figure out how to re-enable\n          // this block if the transition is cancelled for some reason.\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n/**\n * Prompts the user with an Alert before they leave the current screen.\n *\n * @param  message\n * @param  when\n */\nexport function usePrompt(message, when = true) {\n  const blocker = useCallback(\n    (tx) => {\n      // eslint-disable-next-line no-alert\n      if (window.confirm(message)) tx.retry();\n    },\n    [message]\n  );\n\n  useBlocker(blocker, when);\n}\n","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { usePrompt } from '../../hooks/use-prompt';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  usePrompt(\n    'Are you sure you want to leave, all you entered data will be lost',\n    isEntering\n  );\n\n  return (\n    <Fragment>\n      {/* <Prompt when={isEntering} message={promptMessage} /> */}\n\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\" onClick={finishEnteringHandler}>\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n  const navigate = useNavigate();\n  const { sendRequest, status } = useHttp(addQuote);\n\n  useEffect(() => {\n    if (status === 'completed') {\n      navigate('/quotes');\n    }\n  }, [navigate, status]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return (\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}